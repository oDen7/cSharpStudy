using System;

namespace ExpressionsAndOperators
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("{0}", 1024); // 整数字面量
            Console.WriteLine("{0}", 3.1416); // 双精度型字面量
            Console.WriteLine("{0}", 3.1416F); // 浮点型字面量
            Console.WriteLine("{0}", true); // 布尔型字面量
            Console.WriteLine("{0}", 'x'); // 字符型字面量
            Console.WriteLine("{0}", "Hello World"); // 字符串字面量
        }
    }
}

// 表达式
/*
    操作数
    操作数是指作为运算符输入的数据元素.
    可以作为操作数的结构有:
        字面量
        常量
        变量
        方法调用
        元素访问器,如数组访问器和索引器
        其他表达式

    运算符
    运算符是一个符号,它表示返回单个结果的操作.

        将操作数作为输入
        执行某个操作
        基于该操作返回一个值

    表达式
    表达式是运算符和操作数的字符串.
    
    表达式求值
    表达式求值是将每个运算符以适当的顺序应用到它的操作数以产生一个值的过程.
        值被返回到表达式求值的位置.在哪里,它可能是一个封闭的表达式的操作数
        除了返回值以外,一些表达式还有副作用,比如在内存中设置一个值.
*/

// 字面量
/*
    字面量是源代码中键入的数字或字符串,表示一个指定类型的明确的、固定的值。
    因为字面量是写进源代码的,所以它们的值必须在编译时可知.

    对于引用类型变量,字面量null表示变量没有指向内存中的数据.
*/

// 整数字面量
/*
    整数字面量是最常用的字面量.
    它们被书写为十进制数字序列,并且:
        没有小数点
        带有可选的后缀,指明整数的类型.
    
    236 // 整形
    236L // 长整型
    236U // 无符号整型
    236UL // 无符号长整形

    整数类型字面量还可以写成十六进制(hex)形式.
    数字必须是十六进制数(从0到F),并且字符串必须以0x或0X开始(数字0,字母x).

    整数类型字面量的第三种格式是二进制记法.所有的数字必须是0或者1,并且必须以0b或者0B开始(数字0,字母b).

    后缀                              整数类型
    无                                int、uint、long、ulong
    U、u                              uint、ulong
    L、l                              long、ulong
    ul、uL、Ul、UL、lu、Lu、lU、LU     ulong
*/

// 实数字面量
/*
    三种实数类型:float(32位)、double(64位)、decimal(128位)
    
    这意味着它们在内部由两个部分组成:
    其中一部分是实际的数字,
    另一部分则是表示小数点位置的指数.

    实数字面量的组成如下:
        十进制数字
        一个可选的小数点
        一个可选的指数部分
        一个可选的后缀
    
    float f1 = 236F
    double d1 = 236.714
    double d2 = .35192
    double d3 = 6.338e-26

    后缀        实数类型
    无          double
    F、f        float
    D、d        double
    M、m        decimal
*/

// 字符字面量
/*
    字符字面量由两个单引号内的字符组成.
    字符字面量用于表示单个字符(a)、非打印字符(\n)(换行符)或者执行特殊任务的字符,例如转义(\\)

    每个字符字面量只表示一个字符.

    字符字面量可以是下面任意一种:
    单个字符、一个简单转义序列、一个十六进制转义序列或一个Unicode转义序列.
        字符字面量的类型是char
        简单转义序列是一个反斜杠后面跟着单个字符
        十六进制转义序列是一个反斜杠后面跟着一个大写或小写的x,再跟着4个十六进制数字
        Unicode转义序列是一个反斜杠后面跟着一个大写或小写的u,再跟着4个十六进制数字
    
    char c1 = 'd';  // 单个字符
    char c2 = '\n'; // 简单转义序列
    char c3 = '\x0061'; // 十六进制转义序列
    char c4 = '\u005a'; // Unicode转义序列

    名称          转义序列       十六进制编码
    空字符        \0             0x0000
    警告          \a             0x0007
    退格符        \b             0x0008
    水平制表符    \t              0x0009
    换行符        \n              0x000A
    垂直制表符     \v              0x000B
    换页符         \f              0x000C
    回车符         \r              0x000D
    双引号         \"              0x0022
    单引号         \'              0x0027
    反斜杠         \\              0x005C
*/

// 字符串字面量
/*
    字符串字面量使用双引号标记,不同于字符字面量使用单引号.
        有两种字符串字面量:
            常规字符串字面量
            逐字字符串字面量
    
    常规字符串字面量由双引号内的字符序列组成.
        常规字符串字面量可以包括:
            字符
            简单转义序列
            十六进制和Unicode转义序列
    
    string str1 = "Hi there!";
    string str2 = "Val1\t5,Val2\t10";
    string str3 = "Add\x000ASome\u0007Interest";

    逐字字符串字面量的书写如同常规字符串字面量,但它以一个@字符为前缀.
    逐字字符串字面量有以下重要特征:
        逐字字符串字面量与常规字符串字面量的区别在于字符串中的转义序列不会被求值.
        在双引号中间的所有内容,包括通常被认为是转义序列的内容,都被严格按字符串中列出的那样打印.
    
    逐字字符串字面量的唯一例外是相邻的双引号组,它们被解释为单个双引号字符.

    string rst1 = "Hi there!";
    string vst1 = @"Hi there!";

    string rst2 = "It started. \ "Four score and seven...\"";
    string vst2 = @"It started, ""Four score and seven...""";

    string rst3 = "Value 1 \t 5, Val2 \t 10";  // 解释制表符转义字符串
    string vst3 = @"Value 1 \t 5, Val2 \t 10"; // 不解释制表符            
    
    string rst4 = "C:\\Program Files\\Microsoft\\";
    string vst4 = @"C:\Program Files\Microsoft\";

    string rst5 = "Print \x000A Multiple \u000A Lines";
    string vst5 = @"Print 
     Multiple
     Lines";
*/

// 求值顺序
/*
    表达式可以由许多嵌套的子表达式构成.子表达式的求值顺序可以使表达式的最终值发生变化.
*/

// 优先级
/*
    分类                运算符
    初级运算符          a.x, f(x), a[x], x++, x--, new, typeof, checked, unchecked
    一元运算符          x, -, |, ~, ++x, --x, (T)x
    乘法                *, /, %
    加法                +, -
    移位                <<, >>
    关系和类型          <, >, <=, >=, is, as
    相等                ==, !=
    位与                &
    位异或              ^
    位或                |
    条件与              &&
    条件或              ||
    条件选择            ?:
    赋值运算符          =, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=
*/

// 结合性
/*
    假设编译器正在计算一个表达式,并且表达式中所有运算符都有不同的优先级,那么编译器将计算每个子表达式,从级别最高的开始,按优先等级从高到低一直计算下去.
    
*/
